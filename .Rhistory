mutate(liverpool = dpois(k, lambda = lambda_liverpool_win)) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose))
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) * 100 %>% round(2)) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose))
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) * 100 %>% round(2))
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
df <- as.data.frame.matrix(liverpool_vs_tottenham_probs)
df <- t(df)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
df <- as.data.frame.matrix(liverpool_vs_tottenham_probs)
colnames(df) <- c("chance of achieving the following scores:", "Liverpool", "Tottenham")
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
liverpool_vs_tottenham_probs <- as.data.frame.matrix(liverpool_vs_tottenham_probs)
colnames(liverpool_vs_tottenham_probs) <- c("chance of achieving the following scores:", "Liverpool", "Tottenham")
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
liverpool_vs_tottenham_probs <- as.data.frame(liverpool_vs_tottenham_probs)
colnames(liverpool_vs_tottenham_probs) <- c("chance of achieving the following scores:", "Liverpool", "Tottenham")
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
# 转换为长格式
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
# 转换为宽格式
wide_data <- long_data %>%
pivot_wider(names_from = c(team, k), values_from = probability, names_sep = "_")
# 打印表格
kable(wide_data, caption = "进球数概率表")
liverpool_vs_tottenham_probs <- as.data.frame(liverpool_vs_tottenham_probs)
colnames(liverpool_vs_tottenham_probs) <- c("chance of achieving the following scores:", "Liverpool", "Tottenham")
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
# 转换为长格式
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
# 转换为宽格式
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
# 打印表格
kable(wide_data)
liverpool_vs_tottenham_probs <- as.data.frame(liverpool_vs_tottenham_probs)
colnames(liverpool_vs_tottenham_probs) <- c("chance of achieving the following scores:", "Liverpool", "Tottenham")
kable(liverpool_vs_tottenham_probs)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
kable(wide_data)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
expected_goals_values <- c(lambda_liverpool_win, lambda_liverpool_lose)
wide_data <- wide_data %>%
mutate(expected_goals = expected_goals_values)
kable(wide_data)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
expected_goals_values <- c(lambda_liverpool_win, lambda_liverpool_lose)
wide_data <- wide_data %>%
mutate(expected_goals = expected_goals_values) %>%
select(team, expected_goals, everything())
kable(wide_data)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
expected_goals_values <- c(round(lambda_liverpool_win, 2), round(lambda_liverpool_lose, 2))
wide_data <- wide_data %>%
mutate(expected_goals = expected_goals_values) %>%
select(team, expected_goals, everything())
wide_data <- as.data.frame(wide_data)
colnames(wide_data) <- c("Team", "Expected goals", "0 (%)", "1 (%)", "2 (%)", "3 (%)", "4 (%)", "5 (%)", "6 (%)")
kable(wide_data)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
expected_goals_values <- c(round(lambda_liverpool_win, 2), round(lambda_liverpool_lose, 2))
wide_data <- wide_data %>%
mutate(expected_goals = expected_goals_values) %>%
select(team, expected_goals, everything())
wide_data <- as.data.frame(wide_data)
colnames(wide_data) <- c("Team", "Expected goals", "0 (%)", "1 (%)", "2 (%)", "3 (%)", "4 (%)", "5 (%)", "6 (%)")
kable(wide_data)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
expected_goals_values <- c(round(lambda_liverpool_win, 2), round(lambda_liverpool_lose, 2))
wide_data <- wide_data %>%
mutate(expected_goals = expected_goals_values) %>%
select(team, expected_goals, everything())
# wide_data <- as.data.frame(wide_data)
# colnames(wide_data) <- c("Team", "Expected goals", "0 (%)", "1 (%)", "2 (%)", "3 (%)", "4 (%)", "5 (%)", "6 (%)")
kable(wide_data)
View(wide_data)
install(bivpois)
install.packages(bivpois)
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool_win) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_liverpool_lose) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
expected_goals_values <- c(round(lambda_liverpool_win, 2), round(lambda_liverpool_lose, 2))
wide_data <- wide_data %>%
mutate(expected_goals = expected_goals_values) %>%
select(team, expected_goals, everything())
wide_data <- as.data.frame(wide_data)
colnames(wide_data) <- c("Team", "Expected goals", "0 (%)", "1 (%)", "2 (%)", "3 (%)", "4 (%)", "5 (%)", "6 (%)")
kable(wide_data)
lm_creatinine = lm(creatclear ~ age, data = creatinine)
table <- coef(lm_creatinine) %>% round(2)
df <- as.data.frame(table)
rownames(df) <- c("intercept", "slope")
colnames(df) <- c("value")
kable(df,
caption = "The fitted linear model parameters of creatinine.")
1-choose(20, 3)/choose(30, 3)
choose(3, 1)*choose(3, 1)*2/choose(6, 2)
choose(3, 1)*choose(3, 1)*2/factorial(6)
choose(3, 1)*choose(3, 1)*2/(choose(6, 1)*choose(6, 1))
x <- seq(1, 6)
y <- seq(1, 6)
dice2 <- expand.grid(x = x, y = y)
ggplot(dice2) +
xlim(1, 6) + ylim(1, 6) +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, 1)) +
scale_y_continuous(limits = c(1, 6), breaks = seq(1, 6, 1)) +
geom_point(aes(x = x, y = y, color = ifelse((x + y) %% 2 == 0, 'even', 'odd'))) +
geom_abline(intercept = 7, slope = -1, color = "blue") +
labs(x = "First dice number", y = "Second dice number", tag = "s")
x <- seq(1, 6)
y <- seq(1, 6)
dice2 <- expand.grid(x = x, y = y)
ggplot(dice2) +
xlim(1, 6) + ylim(1, 6) +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, 1)) +
scale_y_continuous(limits = c(1, 6), breaks = seq(1, 6, 1)) +
geom_point(aes(x = x, y = y, color = ifelse((x + y) %% 2 == 0, 'even', 'odd'))) +
geom_abline(intercept = 7, slope = -1, color = "blue") +
labs(x = "First dice number", y = "Second dice number", color = "Even") +
scale_color_brewer(type = "qual")
x <- seq(1, 6)
y <- seq(1, 6)
dice2 <- expand.grid(x = x, y = y)
ggplot(dice2) +
xlim(1, 6) + ylim(1, 6) +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, 1)) +
scale_y_continuous(limits = c(1, 6), breaks = seq(1, 6, 1)) +
geom_point(aes(x = x, y = y, color = ifelse((x + y) %% 2 == 0, 'even', 'odd'))) +
geom_abline(intercept = 7, slope = -1, color = "blue") +
labs(x = "First dice number", y = "Second dice number", color = "Parity") +
scale_color_brewer(type = "qual")
ggplot(creatinine) +
geom_point(aes(x = age, y = creatclear)) +
geom_smooth(creatclear ~ age, method = "lm") +
scale_x_continuous(breaks = seq(15, 90, 15)) +
labs(x = "Age", y = "Creatine clearance rate (mL/minute)",
caption = "<b>Figure 5. creatine clearance rate versus age.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
ggplot(creatinine) +
geom_point(aes(x = age, y = creatclear)) +
geom_smooth(aes(creatclear ~ age), method = "lm") +
scale_x_continuous(breaks = seq(15, 90, 15)) +
labs(x = "Age", y = "Creatine clearance rate (mL/minute)",
caption = "<b>Figure 5. creatine clearance rate versus age.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
ggplot(creatinine) +
geom_point(aes(x = age, y = creatclear)) +
geom_smooth(aes(x = age, y = creatclear), method = "lm") +
scale_x_continuous(breaks = seq(15, 90, 15)) +
geom_title("creatine clearance rate versus age") +
labs(x = "Age", y = "Creatine clearance rate (mL/minute)",
caption = "<b>Figure 5. creatine clearance rate versus age.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
ggplot(creatinine) +
geom_point(aes(x = age, y = creatclear)) +
geom_smooth(aes(x = age, y = creatclear), method = "lm") +
scale_x_continuous(breaks = seq(15, 90, 15)) +
ggtitle("creatine clearance rate versus age") +
labs(x = "Age", y = "Creatine clearance rate (mL/minute)",
caption = "<b>Figure 5. creatine clearance rate versus age.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
ggplot(creatinine) +
geom_point(aes(x = age, y = creatclear)) +
geom_smooth(aes(x = age, y = creatclear), method = "lm") +
scale_x_continuous(breaks = seq(15, 90, 15)) +
ggtitle("Creatine Clearance Rate versus Age") +
labs(x = "Age", y = "Creatine clearance rate (mL/minute)",
caption = "<b>Figure 5. creatine clearance rate versus age.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
# Liverpool (home) vs. Tottenham (away)
liverpool_home_attack_strength <- (merged_goals[merged_goals$Team == "Liverpool", ])$attack_strength
liverpool_home_defence_weakness <- (merged_goals[merged_goals$Team == "Liverpool", ])$defence_weakness
tottenham_away_attack_strength <- (merged_goals[merged_goals$Team == "Tottenham", ])$attack_strength
tottenham_away_defence_weakness <- (merged_goals[merged_goals$Team == "Tottenham", ])$defence_weakness
# Calculate lambda values
lambda_liverpool_win <- baseline_home * liverpool_home_attack_strength * tottenham_away_defence_weakness
away = read.csv("../data/raw data/epl_2018_19_away.csv", header = TRUE)
home = read.csv("../data/raw data/epl_2018_19_home.csv", header = TRUE)
avg_goals = (sum(home$GF) + sum(home$GA)) / 20
# merge table
merged_goals <- full_join(home, away, by = "Team", suffix = c(".home", ".away"))
merged_goals <- merged_goals %>%
mutate(
GP = coalesce(GP.home, 0) + coalesce(GP.away, 0),
GF = coalesce(GF.home, 0) + coalesce(GF.away, 0),
GA = coalesce(GA.home, 0) + coalesce(GA.away, 0)
) %>%
select(Team, GP, GF, GA)
merged_goals <- merged_goals %>%
mutate(attack_strength = merged_goals$GF / avg_goals) %>%
mutate(defence_weakness = merged_goals$GA / avg_goals)
baseline_home = avg_home_per_game = sum(home$GF) / (19 * 20)
baseline_away = avg_away_per_game = sum(away$GF) / (19 * 20)
# Liverpool (home) vs. Tottenham (away)
liverpool_home_attack_strength <- (merged_goals[merged_goals$Team == "Liverpool", ])$attack_strength
liverpool_home_defence_weakness <- (merged_goals[merged_goals$Team == "Liverpool", ])$defence_weakness
tottenham_away_attack_strength <- (merged_goals[merged_goals$Team == "Tottenham", ])$attack_strength
tottenham_away_defence_weakness <- (merged_goals[merged_goals$Team == "Tottenham", ])$defence_weakness
# Calculate lambda values
lambda_liverpool_win <- baseline_home * liverpool_home_attack_strength * tottenham_away_defence_weakness
lambda_liverpool_lose <- baseline_away * liverpool_home_defence_weakness * tottenham_away_attack_strength
lambda_liverpool_win
lambda_liverpool_lose
# Liverpool (home) vs. Tottenham (away)
liverpool_home_attack_strength <- (merged_goals[merged_goals$Team == "Liverpool", ])$attack_strength
liverpool_home_defence_weakness <- (merged_goals[merged_goals$Team == "Liverpool", ])$defence_weakness
tottenham_away_attack_strength <- (merged_goals[merged_goals$Team == "Tottenham", ])$attack_strength
tottenham_away_defence_weakness <- (merged_goals[merged_goals$Team == "Tottenham", ])$defence_weakness
# Calculate lambda values
lambda_liverpool_win <- baseline_home * liverpool_home_attack_strength * tottenham_away_defence_weakness
lambda_liverpool_lose <- baseline_away * liverpool_home_defence_weakness * tottenham_away_attack_strength
baseline_home
liverpool_home_attack_strength
tottenham_away_defence_weakness
baseline_away
liverpool_home_defence_weakness
tottenham_away_attack_strength
lambda_liverpool_win
lambda_liverpool_lose
# Manchester City ( (home) vs. Arsenal (away)
man_city_home_attack_strength <- (merged_goals[merged_goals$Team == "Manchester City", ])$attack_strength
man_city_home_defence_weakness <- (merged_goals[merged_goals$Team == "Manchester City", ])$defence_weakness
arsenal_away_attack_strength <- (merged_goals[merged_goals$Team == "Arsenal", ])$attack_strength
arsenal_away_defence_weakness <- (merged_goals[merged_goals$Team == "Arsenal", ])$defence_weakness
# Calculate lambda values
lambda_man_city_win <- baseline_home * man_city_home_attack_strength * arsenal_away_defence_weakness
lambda_man_city_lose <- baseline_away * man_city_home_defence_weakness * arsenal_away_attack_strength
baseline_home
man_city_home_attack_strength
arsenal_away_defence_weakness
lambda_man_city_win
baseline_away
man_city_home_defence_weakness
arsenal_away_attack_strength
lambda_man_city_lose
# Manchester City ( (home) vs. Arsenal (away)
man_city_home_attack_strength <- (merged_goals[merged_goals$Team == "Manchester City", ])$attack_strength
man_city_home_defence_weakness <- (merged_goals[merged_goals$Team == "Manchester City", ])$defence_weakness
arsenal_away_attack_strength <- (merged_goals[merged_goals$Team == "Arsenal", ])$attack_strength
arsenal_away_defence_weakness <- (merged_goals[merged_goals$Team == "Arsenal", ])$defence_weakness
# Calculate lambda values
lambda_man_city_win <- baseline_home * man_city_home_attack_strength * arsenal_away_defence_weakness
lambda_man_city_lose <- baseline_away * arsenal_away_attack_strength * man_city_home_defence_weakness
# baseline_home
# man_city_home_attack_strength
# arsenal_away_defence_weakness
# lambda_man_city_win
# baseline_away
# arsenal_away_attack_strength
# man_city_home_defence_weakness
# lambda_man_city_lose
dpois(2, lambda=lambda_man_city_win)
# Manchester City ( (home) vs. Arsenal (away)
man_city_home_attack_strength <- (merged_goals[merged_goals$Team == "Manchester City", ])$attack_strength
man_city_home_defence_weakness <- (merged_goals[merged_goals$Team == "Manchester City", ])$defence_weakness
arsenal_away_attack_strength <- (merged_goals[merged_goals$Team == "Arsenal", ])$attack_strength
arsenal_away_defence_weakness <- (merged_goals[merged_goals$Team == "Arsenal", ])$defence_weakness
# Calculate lambda values
lambda_man_city_win <- baseline_home * man_city_home_attack_strength * arsenal_away_defence_weakness
lambda_man_city_lose <- baseline_away * arsenal_away_attack_strength * man_city_home_defence_weakness
# baseline_home
# man_city_home_attack_strength
# arsenal_away_defence_weakness
# lambda_man_city_win
# baseline_away
# arsenal_away_attack_strength
# man_city_home_defence_weakness
# lambda_man_city_lose
arsenal_probs = tibble(k=0:8)
arsenal_probs = arsenal_probs %>%
mutate(prob = dpois(k, lambda=lambda_man_city_win))
ggplot(arsenal_probs) +
geom_col(aes(x=k, y=prob))
# Manchester City ( (home) vs. Arsenal (away)
man_city_home_attack_strength <- (merged_goals[merged_goals$Team == "Manchester City", ])$attack_strength
man_city_home_defence_weakness <- (merged_goals[merged_goals$Team == "Manchester City", ])$defence_weakness
arsenal_away_attack_strength <- (merged_goals[merged_goals$Team == "Arsenal", ])$attack_strength
arsenal_away_defence_weakness <- (merged_goals[merged_goals$Team == "Arsenal", ])$defence_weakness
# Calculate lambda values
lambda_man_city_win <- baseline_home * man_city_home_attack_strength * arsenal_away_defence_weakness
lambda_man_city_lose <- baseline_away * arsenal_away_attack_strength * man_city_home_defence_weakness
# baseline_home
# man_city_home_attack_strength
# arsenal_away_defence_weakness
# lambda_man_city_win
# baseline_away
# arsenal_away_attack_strength
# man_city_home_defence_weakness
# lambda_man_city_lose
arsenal_probs = tibble(k=0:8)
arsenal_probs = arsenal_probs %>%
mutate(prob = dpois(k, lambda=lambda_man_city_lose))
ggplot(arsenal_probs) +
geom_col(aes(x=k, y=prob))
sum(home$GF) + sum(away$GF)
sum(home$GF)
sum(away$GF)
sum(home$GF) + sum(away$GF)
sum(home$GF)
mean(home$GF) / 19
sum(away$GF)
mean(away$GF) / 19
sum(home$GF) + sum(away$GF)
away = read.csv("../data/raw data/epl_2018_19_away.csv", header = TRUE)
home = read.csv("../data/raw data/epl_2018_19_home.csv", header = TRUE)
avg_goals = (sum(home$GF) + sum(home$GA)) / 20
# merge table
merged_goals <- full_join(home, away, by = "Team", suffix = c(".home", ".away"))
merged_goals <- merged_goals %>%
mutate(
GP = coalesce(GP.home, 0) + coalesce(GP.away, 0),
GF = coalesce(GF.home, 0) + coalesce(GF.away, 0),
GA = coalesce(GA.home, 0) + coalesce(GA.away, 0)
) %>%
select(Team, GP, GF, GA)
merged_goals <- merged_goals %>%
mutate(attack_strength = merged_goals$GF / avg_goals) %>%
mutate(defence_weakness = merged_goals$GA / avg_goals)
View(merged_goals)
# sum(home$GF)
# mean(home$GF) / 19
# sum(away$GF)
# mean(away$GF) / 19
# sum(home$GF) + sum(away$GF)
baseline_home = avg_home_per_game = sum(home$GF) / (19 * 20)
baseline_away = avg_away_per_game = sum(away$GF) / (19 * 20)
# Liverpool (home) vs. Tottenham (away)
liverpool_home_attack_strength <- (merged_goals[merged_goals$Team == "Liverpool", ])$attack_strength
liverpool_home_defence_weakness <- (merged_goals[merged_goals$Team == "Liverpool", ])$defence_weakness
tottenham_away_attack_strength <- (merged_goals[merged_goals$Team == "Tottenham", ])$attack_strength
tottenham_away_defence_weakness <- (merged_goals[merged_goals$Team == "Tottenham", ])$defence_weakness
# Calculate lambda values
liverpool_expected_goals <- baseline_home * liverpool_home_attack_strength * tottenham_away_defence_weakness
tottenham_expected_goals <- baseline_away * tottenham_away_attack_strength * liverpool_home_defence_weakness
lambda_liverpool = liverpool_expected_goals
lambda_tottenham = tottenham_expected_goals
# baseline_home
# liverpool_home_attack_strength
# tottenham_away_defence_weakness
# lambda_liverpool
# baseline_away
# tottenham_away_attack_strength
# liverpool_home_defence_weakness
# lambda_tottenham
liverpool_vs_tottenham_probs = tibble(k = 0:6)
liverpool_vs_tottenham_probs = liverpool_vs_tottenham_probs %>%
mutate(liverpool = dpois(k, lambda = lambda_liverpool) %>% round(2) * 100) %>%
mutate(tottenham = dpois(k, lambda = lambda_tottenham) %>% round(2) * 100)
long_data <- liverpool_vs_tottenham_probs %>%
pivot_longer(cols = -k, names_to = "team", values_to = "probability")
wide_data <- long_data %>%
pivot_wider(names_from = k, values_from = probability, names_sep = "_")
expected_goals_values <- c(round(liverpool_expected_goals, 2), round(tottenham_expected_goals, 2))
wide_data <- wide_data %>%
mutate(expected_goals = expected_goals_values) %>%
select(team, expected_goals, everything())
wide_data <- as.data.frame(wide_data)
colnames(wide_data) <- c("Team", "Expected goals", "0 (%)", "1 (%)", "2 (%)", "3 (%)", "4 (%)", "5 (%)", "6 (%)")
kable(wide_data,
caption = "Expected number of goals, and percentage chance of getting a particular score for the two teams (Liverpool (home) versus Tottenham (away)), assuming a Poisson distribution")
# draw heat plot
soccer_scores = tibble(liverpool = 0:6, tottenham = 0:6)
soccer_probs = soccer_scores %>%
tidyr::expand(liverpool, tottenham) %>%
mutate(prob = dpois(liverpool, lambda_liverpool) * dpois(tottenham, lambda_tottenham))
ggplot(soccer_probs) +
ggtitle("Liverpool v.s. Tottenham") +
geom_tile(aes(x = liverpool, y = tottenham, fill = prob)) +
geom_text(aes(x = liverpool, y = tottenham, label=round(prob, 3)), color='darkblue') +
scale_fill_gradient(low = "white", high = "red") +
labs(x = "Liverpool (home)", y = "Tottenham (away)",
caption = "<b>Figure 7. Probabilities of the expected goals in a match between Liverpool (home) and Tottenham <br>(away).</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
View(soccer_scores)
View(soccer_probs)
# Manchester City ( (home) vs. Arsenal (away)
man_city_home_attack_strength <- (merged_goals[merged_goals$Team == "Manchester City", ])$attack_strength
man_city_home_defence_weakness <- (merged_goals[merged_goals$Team == "Manchester City", ])$defence_weakness
arsenal_away_attack_strength <- (merged_goals[merged_goals$Team == "Arsenal", ])$attack_strength
arsenal_away_defence_weakness <- (merged_goals[merged_goals$Team == "Arsenal", ])$defence_weakness
# Calculate lambda values
man_city_expected_goals <- baseline_home * man_city_home_attack_strength * arsenal_away_defence_weakness
arsenal_expected_goals <- baseline_away * arsenal_away_attack_strength * man_city_home_defence_weakness
lambda_man_city = man_city_expected_goals
lambda_arsenal = arsenal_expected_goals
# baseline_home
# man_city_home_attack_strength
# arsenal_away_defence_weakness
# lambda_man_city
# baseline_away
# arsenal_away_attack_strength
# man_city_home_defence_weakness
# lambda_arsenal
arsenal_probs = tibble(k=0:8)
arsenal_probs = arsenal_probs %>%
mutate(prob = dpois(k, lambda=lambda_arsenal))
ggplot(arsenal_probs) +
geom_col(aes(x=k, y=prob))
dpois(2, lambda=2.18)
dpois(1, lambda=1.45)
dpois(2, lambda=2.18) * dpois(1, lambda=1.45)
# Manchester City ( (home) vs. Arsenal (away)
man_city_home_attack_strength <- (merged_goals[merged_goals$Team == "Manchester City", ])$attack_strength
man_city_home_defence_weakness <- (merged_goals[merged_goals$Team == "Manchester City", ])$defence_weakness
arsenal_away_attack_strength <- (merged_goals[merged_goals$Team == "Arsenal", ])$attack_strength
arsenal_away_defence_weakness <- (merged_goals[merged_goals$Team == "Arsenal", ])$defence_weakness
# Calculate lambda values
man_city_expected_goals <- baseline_home * man_city_home_attack_strength * arsenal_away_defence_weakness
arsenal_expected_goals <- baseline_away * arsenal_away_attack_strength * man_city_home_defence_weakness
lambda_man_city = man_city_expected_goals
lambda_arsenal = arsenal_expected_goals
# baseline_home
# man_city_home_attack_strength
# arsenal_away_defence_weakness
# lambda_man_city
# baseline_away
# arsenal_away_attack_strength
# man_city_home_defence_weakness
# lambda_arsenal
arsenal_probs = tibble(k=0:8)
arsenal_probs = arsenal_probs %>%
mutate(prob = dpois(k, lambda=lambda_arsenal))
ggplot(arsenal_probs) +
geom_col(aes(x=k, y=prob))
dpois(2, lambda=lambda_man_city)
dpois(1, lambda=lambda_arsenal)
dpois(2, lambda=lambda_man_city) * dpois(1, lambda=lambda_arsenal)
