group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE)
View(ten_week_hit)
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30)
View(ten_week_hit)
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30)
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = ten_week_hit_count)) +
coord_flip()
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30)
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = ten_week_hit_count))
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30)
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30)
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = ten_week_hit_count)) +
coord_flip() +
ggtitle("Ten-week hit since 1958") +
labs(x = "Total ten-week hit songs", y = "Performer",
caption = "<b>Figure 4.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
View(ten_week_hit)
View(ten_week_hit)
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30)
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = mean(ten_week_hit_count))) +
coord_flip() +
ggtitle("Ten-week hit since 1958") +
labs(x = "Total ten-week hit songs", y = "Performer",
caption = "<b>Figure 4.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30) %>%
distinct(performer, pick("performer", "song", "ten_week_hit_count")) %>%
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = ten_week_hit_count)) +
coord_flip() +
ggtitle("Ten-week hit since 1958") +
labs(x = "Total ten-week hit songs", y = "Performer",
caption = "<b>Figure 4.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30) %>%
distinct(performer, pick("performer", "song", "ten_week_hit_count")) %>%
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = ten_week_hit_count)) +
coord_flip() +
ggtitle("Ten-week hit since 1958") +
labs(x = "Total ten-week hit songs", y = "Performer",
caption = "<b>Figure 4.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30) %>%
distinct(performer, pick("performer", "song", "ten_week_hit_count"))
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = ten_week_hit_count)) +
coord_flip() +
ggtitle("Ten-week hit since 1958") +
labs(x = "Total ten-week hit songs", y = "Performer",
caption = "<b>Figure 4.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
View(ten_week_hit)
ten_week_hit <- billboard %>%
group_by(performer, song) %>%
mutate(count = n()) %>%
distinct(performer, song, pick("performer", "song", "count")) %>%
filter(count >= 10) %>%
group_by(performer) %>%
mutate(ten_week_hit_count = n()) %>%
distinct(performer, song, .keep_all = TRUE) %>%
filter(ten_week_hit_count >= 30) %>%
distinct(performer, pick("performer", "ten_week_hit_count"))
ggplot(ten_week_hit) +
# use fct_reorder to order col: https://datavizpyr.com/re-ordering-bars-in-barplot-in-r/
geom_col(aes(x = fct_reorder(performer, ten_week_hit_count), y = ten_week_hit_count)) +
coord_flip() +
ggtitle("Ten-week hit since 1958") +
labs(x = "Total ten-week hit songs", y = "Performer",
caption = "<b>Figure 4.</b>") +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.caption = element_markdown())
# The binomial distribution
# The way we calculate these binomial probabilities in R is using the dbinom function.
# We’d expect to see exactly 7 no-shows with the probability 0.09
# out of total 140 peoples under binomial probability distribution
dbinom(7, size = 140, prob = 0.09)
dbinom(13, size = 140, prob = 0.09)
# First we create a tibble, or table of data, that has a single column called k,
# containing the numbers 0 through 30 (0:30).
airlines = tibble(k = 0:30)
airlines <- airlines %>%
mutate(prob = dbinom(k, 140, 0.09))
ggplot(airlines) +
geom_col(aes(x = k, y = prob))
# The function called pbinom calculates the sum of probabilities lower equal x.
# That means pbinom is a function work as the cumulative distribution function.
pbinom(5, 140, 0.09)
# So according to the model, there’s about a 1.1% chance of 5 or fewer no-shows.
# [1] 0.01098229
# The Poisson distribution
# To calculate probabilities under the poisson distribution, we can use the dpois function in R.
man_city_probs = tibble(k = 0:8)
man_city_probs <- man_city_prob %>%
mutate(prob = dpois(k, lambda = 2.18))
ggplot(man_city_probs) +
geom_col(aes(x = k, y = prob))
arsenal_probs = tibble(k = 0:8)
arsenal_probs <- arsenal_probs %>%
mutate(prob = dpois(k, lambda = 1.45))
ggplot(arsenal_probs) +
geom_col(aes(x = k, y = prob))
# if we wanted to estimate the probability of a 2-1 win for Man City,
# we can multiply the two Poisson probabilities together under the assumption of independence.
dpois(2, lambda = 2.18) * dpois(1, lambda = 1.45)
# [1] 0.09136125
soccer_scores = tibble(man_city = 0:6, arsenal = 0:6)
soccer_probs = soccer_scores %>%
tidyr::expand(man_city, arsenal) %>%
mutate(prob = dpois(man_city, 2.18) * dpois(arsenal, 1.45))
ggplot(soccer_probs) +
# Make a heat map, which will array the possible scores in a 2D grid of tiles.
geom_tile(aes(x = man_city, y = arsenal, fill = prob)) +
geom_text(aes(x = man_city, y = arsenal, label = round(prob, 3)), color='darkblue') +
scale_fill_gradient(low = "white", high = "red")
soccer_probs %>%
filter(man_city > arsenal) %>%
summarize(sum(prob))
# The binomial distribution
# The way we calculate these binomial probabilities in R is using the dbinom function.
# We’d expect to see exactly 7 no-shows with the probability 0.09
# out of total 140 peoples under binomial probability distribution
dbinom(7, size = 140, prob = 0.09)
dbinom(13, size = 140, prob = 0.09)
# First we create a tibble, or table of data, that has a single column called k,
# containing the numbers 0 through 30 (0:30).
airlines = tibble(k = 0:30)
airlines <- airlines %>%
mutate(prob = dbinom(k, 140, 0.09))
ggplot(airlines) +
geom_col(aes(x = k, y = prob))
# The function called pbinom calculates the sum of probabilities lower equal x.
# That means pbinom is a function work as the cumulative distribution function.
pbinom(5, 140, 0.09)
# So according to the model, there’s about a 1.1% chance of 5 or fewer no-shows.
# [1] 0.01098229
# The Poisson distribution
# To calculate probabilities under the poisson distribution, we can use the dpois function in R.
man_city_probs = tibble(k = 0:8)
man_city_probs <- man_city_prob %>%
mutate(prob = dpois(k, lambda = 2.18))
ggplot(man_city_probs) +
geom_col(aes(x = k, y = prob))
arsenal_probs = tibble(k = 0:8)
arsenal_probs <- arsenal_probs %>%
mutate(prob = dpois(k, lambda = 1.45))
ggplot(arsenal_probs) +
geom_col(aes(x = k, y = prob))
# if we wanted to estimate the probability of a 2-1 win for Man City,
# we can multiply the two Poisson probabilities together under the assumption of independence.
dpois(2, lambda = 2.18) * dpois(1, lambda = 1.45)
# [1] 0.09136125
soccer_scores = tibble(man_city = 0:6, arsenal = 0:6)
soccer_probs = soccer_scores %>%
tidyr::expand(man_city, arsenal) %>%
mutate(prob = dpois(man_city, 2.18) * dpois(arsenal, 1.45))
ggplot(soccer_probs) +
# Make a heat map, which will array the possible scores in a 2D grid of tiles.
geom_tile(aes(x = man_city, y = arsenal, fill = prob)) +
geom_text(aes(x = man_city, y = arsenal, label = round(prob, 3)), color='darkblue') +
scale_fill_gradient(low = "white", high = "red")
# calculate the overall probability of a Man City win
soccer_probs %>%
filter(man_city > arsenal) %>%
summarize(sum(prob))
# calculate the draw
soccer_probs %>%
filter(man_city == arsenal) %>%
summarize(sum(prob))
# calculate Arsenal win
soccer_probs %>%
filter(man_city < arsenal) %>%
summarize(sum(prob))
# use the ppois function, which works much like pbinom did above
ppois(6, lambda = 2.18, lower.tail = FALSE)
# The binomial distribution
# The way we calculate these binomial probabilities in R is using the dbinom function.
# We’d expect to see exactly 7 no-shows with the probability 0.09
# out of total 140 peoples under binomial probability distribution
dbinom(7, size = 140, prob = 0.09)
dbinom(13, size = 140, prob = 0.09)
# First we create a tibble, or table of data, that has a single column called k,
# containing the numbers 0 through 30 (0:30).
airlines = tibble(k = 0:30)
airlines <- airlines %>%
mutate(prob = dbinom(k, 140, 0.09))
ggplot(airlines) +
geom_col(aes(x = k, y = prob))
# The function called pbinom calculates the sum of probabilities lower equal x.
# That means pbinom is a function work as the cumulative distribution function.
pbinom(5, 140, 0.09)
# So according to the model, there’s about a 1.1% chance of 5 or fewer no-shows.
# [1] 0.01098229
# The Poisson distribution
# To calculate probabilities under the poisson distribution, we can use the dpois function in R.
man_city_probs = tibble(k = 0:8)
man_city_probs <- man_city_prob %>%
mutate(prob = dpois(k, lambda = 2.18))
ggplot(man_city_probs) +
geom_col(aes(x = k, y = prob))
arsenal_probs = tibble(k = 0:8)
arsenal_probs <- arsenal_probs %>%
mutate(prob = dpois(k, lambda = 1.45))
ggplot(arsenal_probs) +
geom_col(aes(x = k, y = prob))
# if we wanted to estimate the probability of a 2-1 win for Man City,
# we can multiply the two Poisson probabilities together under the assumption of independence.
dpois(2, lambda = 2.18) * dpois(1, lambda = 1.45)
# [1] 0.09136125
soccer_scores = tibble(man_city = 0:6, arsenal = 0:6)
soccer_probs = soccer_scores %>%
tidyr::expand(man_city, arsenal) %>%
mutate(prob = dpois(man_city, 2.18) * dpois(arsenal, 1.45))
ggplot(soccer_probs) +
# Make a heat map, which will array the possible scores in a 2D grid of tiles.
geom_tile(aes(x = man_city, y = arsenal, fill = prob)) +
geom_text(aes(x = man_city, y = arsenal, label = round(prob, 3)), color='darkblue') +
scale_fill_gradient(low = "white", high = "red")
# calculate the overall probability of a Man City win
soccer_probs %>%
filter(man_city > arsenal) %>%
summarize(sum(prob))
# calculate the draw
soccer_probs %>%
filter(man_city == arsenal) %>%
summarize(sum(prob))
# calculate Arsenal win
soccer_probs %>%
filter(man_city < arsenal) %>%
summarize(sum(prob))
# use the ppois function, which works much like pbinom did above
ppois(6, lambda = 2.18, lower.tail = FALSE)
# [1] 0.007118364
# use the rpois function to run a Monte Carlo simulation
NMC = 100000   # number of Monte Carlo simulations
arsenal = rpois(NMC, 1.45)
ManCity = rpois(NMC, 2.18)
# The binomial distribution
# The way we calculate these binomial probabilities in R is using the dbinom function.
# We’d expect to see exactly 7 no-shows with the probability 0.09
# out of total 140 peoples under binomial probability distribution
dbinom(7, size = 140, prob = 0.09)
dbinom(13, size = 140, prob = 0.09)
# First we create a tibble, or table of data, that has a single column called k,
# containing the numbers 0 through 30 (0:30).
airlines = tibble(k = 0:30)
airlines <- airlines %>%
mutate(prob = dbinom(k, 140, 0.09))
ggplot(airlines) +
geom_col(aes(x = k, y = prob))
# The function called pbinom calculates the sum of probabilities lower equal x.
# That means pbinom is a function work as the cumulative distribution function.
pbinom(5, 140, 0.09)
# So according to the model, there’s about a 1.1% chance of 5 or fewer no-shows.
# [1] 0.01098229
# The Poisson distribution
# To calculate probabilities under the poisson distribution, we can use the dpois function in R.
man_city_probs = tibble(k = 0:8)
man_city_probs <- man_city_prob %>%
mutate(prob = dpois(k, lambda = 2.18))
ggplot(man_city_probs) +
geom_col(aes(x = k, y = prob))
arsenal_probs = tibble(k = 0:8)
arsenal_probs <- arsenal_probs %>%
mutate(prob = dpois(k, lambda = 1.45))
ggplot(arsenal_probs) +
geom_col(aes(x = k, y = prob))
# if we wanted to estimate the probability of a 2-1 win for Man City,
# we can multiply the two Poisson probabilities together under the assumption of independence.
dpois(2, lambda = 2.18) * dpois(1, lambda = 1.45)
# [1] 0.09136125
soccer_scores = tibble(man_city = 0:6, arsenal = 0:6)
soccer_probs = soccer_scores %>%
tidyr::expand(man_city, arsenal) %>%
mutate(prob = dpois(man_city, 2.18) * dpois(arsenal, 1.45))
ggplot(soccer_probs) +
# Make a heat map, which will array the possible scores in a 2D grid of tiles.
geom_tile(aes(x = man_city, y = arsenal, fill = prob)) +
geom_text(aes(x = man_city, y = arsenal, label = round(prob, 3)), color='darkblue') +
scale_fill_gradient(low = "white", high = "red")
# calculate the overall probability of a Man City win
soccer_probs %>%
filter(man_city > arsenal) %>%
summarize(sum(prob))
# calculate the draw
soccer_probs %>%
filter(man_city == arsenal) %>%
summarize(sum(prob))
# calculate Arsenal win
soccer_probs %>%
filter(man_city < arsenal) %>%
summarize(sum(prob))
# use the ppois function, which works much like pbinom did above
ppois(6, lambda = 2.18, lower.tail = FALSE)
# [1] 0.007118364
# use the rpois function to run a Monte Carlo simulation
NMC = 100000   # number of Monte Carlo simulations
arsenal = rpois(NMC, 1.45)
ManCity = rpois(NMC, 2.18)
sum(arsenal > ManCity)/NMC
# The binomial distribution
# The way we calculate these binomial probabilities in R is using the dbinom function.
# We’d expect to see exactly 7 no-shows with the probability 0.09
# out of total 140 peoples under binomial probability distribution
dbinom(7, size = 140, prob = 0.09)
dbinom(13, size = 140, prob = 0.09)
# First we create a tibble, or table of data, that has a single column called k,
# containing the numbers 0 through 30 (0:30).
airlines = tibble(k = 0:30)
airlines <- airlines %>%
mutate(prob = dbinom(k, 140, 0.09))
ggplot(airlines) +
geom_col(aes(x = k, y = prob))
# The function called pbinom calculates the sum of probabilities lower equal x.
# That means pbinom is a function work as the cumulative distribution function.
pbinom(5, 140, 0.09)
# So according to the model, there’s about a 1.1% chance of 5 or fewer no-shows.
# [1] 0.01098229
# The Poisson distribution
# To calculate probabilities under the poisson distribution, we can use the dpois function in R.
man_city_probs = tibble(k = 0:8)
man_city_probs <- man_city_prob %>%
mutate(prob = dpois(k, lambda = 2.18))
ggplot(man_city_probs) +
geom_col(aes(x = k, y = prob))
arsenal_probs = tibble(k = 0:8)
arsenal_probs <- arsenal_probs %>%
mutate(prob = dpois(k, lambda = 1.45))
ggplot(arsenal_probs) +
geom_col(aes(x = k, y = prob))
# if we wanted to estimate the probability of a 2-1 win for Man City,
# we can multiply the two Poisson probabilities together under the assumption of independence.
dpois(2, lambda = 2.18) * dpois(1, lambda = 1.45)
# [1] 0.09136125
soccer_scores = tibble(man_city = 0:6, arsenal = 0:6)
soccer_probs = soccer_scores %>%
tidyr::expand(man_city, arsenal) %>%
mutate(prob = dpois(man_city, 2.18) * dpois(arsenal, 1.45))
ggplot(soccer_probs) +
# Make a heat map, which will array the possible scores in a 2D grid of tiles.
geom_tile(aes(x = man_city, y = arsenal, fill = prob)) +
geom_text(aes(x = man_city, y = arsenal, label = round(prob, 3)), color='darkblue') +
scale_fill_gradient(low = "white", high = "red")
# calculate the overall probability of a Man City win
soccer_probs %>%
filter(man_city > arsenal) %>%
summarize(sum(prob))
# calculate the draw
soccer_probs %>%
filter(man_city == arsenal) %>%
summarize(sum(prob))
# calculate Arsenal win
soccer_probs %>%
filter(man_city < arsenal) %>%
summarize(sum(prob))
# use the ppois function, which works much like pbinom did above
ppois(6, lambda = 2.18, lower.tail = FALSE)
# [1] 0.007118364
# use the rpois function to run a Monte Carlo simulation
NMC = 100000   # number of Monte Carlo simulations
arsenal = rpois(NMC, 1.45)
ManCity = rpois(NMC, 2.18)
# here’s the approximate probability of an Arsenal win in simulated game outcomes
sum(arsenal > ManCity)/NMC
# Cross-tabulate the simulated results
xtabs(~arsenal + ManCity)
away = read.csv("../data/raw data/epl_2018-19_away.csv", header = TRUE)
away = read.csv("../data/raw data/epl_2018_19_away.csv", header = TRUE)
home = read.csv("../data/raw data/epl_2018_19_home.csv", header = TRUE)
View(away)
View(home)
prob_liverpool_home = (home[home$Team == "Liverpool"])$GF
soccer_scores = tibble(Liverpool = 0:6, Tottenham = 0:6)
prob_liverpool_home = (home[home$Team == "Liverpool"])$GF
print(prob_liverpool_home)
soccer_scores = tibble(Liverpool = 0:6, Tottenham = 0:6)
prob_liverpool_home = (home[home$Team == "Liverpool"])
print(prob_liverpool_home)
soccer_scores = tibble(Liverpool = 0:6, Tottenham = 0:6)
prob_liverpool_home = (home[home$Team == "Liverpool", ])
print(prob_liverpool_home)
soccer_scores = tibble(Liverpool = 0:6, Tottenham = 0:6)
prob_liverpool_home = (home[home$Team == "Liverpool", ])$GF
print(prob_liverpool_home)
soccer_scores = tibble(Liverpool = 0:6, Tottenham = 0:6)
liverpool_home_gf = (home[home$Team == "Liverpool", ])$GF
liverpool_home_ga = (home[home$Team == "Liverpool", ])$GA
prob_liverpool_home = liverpool_home_gf / (liverpool_home_gf + liverpool_home_ga)
soccer_scores = tibble(Liverpool = 0:6, Tottenham = 0:6)
liverpool_home_gf = (home[home$Team == "Liverpool", ])$GF
liverpool_home_ga = (home[home$Team == "Liverpool", ])$GA
tottenham_away_gf = (home[home$Team == "Tottenham", ])$GF
tottenham_away_ga = (home[home$Team == "Tottenham", ])$GA
soccer_scores = tibble(Liverpool = 0:100, Tottenham = 0:100)
soccer_probs = soccer_scores %>%
tidyr::expand(Liverpool, Tottenham) %>%
mutate(prob = dpois(Liverpool, liverpool_home_gf) * dpois(Tottenham, tottenham_away_ga))
soccer_probs %>%
filter(Liverpool > Tottenham) %>%
summarize(sum(prob))
liverpool_home_gf = (home[home$Team == "Liverpool", ])$GF
liverpool_home_ga = (home[home$Team == "Liverpool", ])$GA
tottenham_away_gf = (home[home$Team == "Tottenham", ])$GF
tottenham_away_ga = (home[home$Team == "Tottenham", ])$GA
soccer_scores = tibble(Liverpool = 0:100, Tottenham = 0:100)
soccer_probs = soccer_scores %>%
tidyr::expand(Liverpool, Tottenham) %>%
mutate(prob = dpois(Liverpool, liverpool_home_gf) * dpois(Tottenham, tottenham_away_ga))
soccer_probs %>%
filter(Liverpool > Tottenham) %>%
summarize(sum(prob))
soccer_probs %>%
filter(Liverpool == Tottenham) %>%
summarize(sum(prob))
soccer_probs %>%
filter(Liverpool < Tottenham) %>%
summarize(sum(prob))
