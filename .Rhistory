count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.1)
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
library(tidyverse)
# simple computations with the normal distribution
# rnorm: simulating random normal variables
# pnorm: calculating tail areas under the normal distribution
# there's also a dnorm...
# but it's kind of hard to interpret without calculus!
# we won't use dnorm (the normal density function) in this course.
# Since 1918, the US stock market has averaged a 6% annual return
# net of inflation, with a yearly standard deviation of 20%.
ReturnAvg = 0.06
ReturnSD = 0.20
# if yearly stock returns are normally distributed,
# what do they tend to look like?
# rnorm wants to know three things:
#   - how many random draws (here, 10,000)
#   - the mean
#   - the standard deviation
sim_returns = tibble(return = rnorm(10000, ReturnAvg, ReturnSD))
ggplot(sim_returns) +
geom_histogram(aes(x=return))
# What is the probability of seeing a really bad year,
# with -25% return or worse?
# pnorm(x, mu, sd) gives you P(X <= x) if X ~ N(mu, sd)
pnorm(-0.25, ReturnAvg, ReturnSD)
# What about about a really good year, with >30% growth?
# pnorm gives us the chance of 30% return or less...
pnorm(0.3, ReturnAvg, ReturnSD)
# so this is the chance of >30% return:
1 - pnorm(0.3, ReturnAvg, ReturnSD)
library(mosaic)
# use Import Dataset to read in "annual_returns_since1928.csv"
# Data on annual returns of stocks, bonds, and savings account
annual_returns = read.csv("../data/annual_returns_since1928.csv")
library(mosaic)
# use Import Dataset to read in "annual_returns_since1928.csv"
# Data on annual returns of stocks, bonds, and savings account
annual_returns = read.csv("../ECO_s394D_Summer2024/data/raw data/annual_returns_since1928.csv")
# first few lines
head(annual_returns)
# Shape of distribution of returns, net of inflation?
hist(annual_returns$SP500 - annual_returns$Inflation)
# Mean and standard deviation of net returns for stocks
mean(annual_returns$SP500 - annual_returns$Inflation)
sd(annual_returns$SP500 - annual_returns$Inflation)
# Modeling a risky asset with a positive expected return
mu = mean(annual_returns$SP500 - annual_returns$Inflation)
sigma = sd(annual_returns$SP500 - annual_returns$Inflation)
Horizon = 40
Wealth = 10000  # Initial wealth
WealthTracker = rep(0, Horizon)  # Placeholder
# Sweep through each year and update the value of wealth
for(i in 1:Horizon) {
ThisReturn = rnorm(1, mu, sigma)  # simulate a random return
Wealth = Wealth * (1 + ThisReturn) # update wealth recursively
WealthTracker[i] = Wealth # save the result
}
Wealth  # final value of wealth
plot(WealthTracker, type='l')  # wealth over time
# Now a Monte Carlo simulation
InitialWealth = 10000
sim1 = do(1000)*{
Wealth = InitialWealth  # Reset initial wealth
WealthTracker = rep(0, Horizon)  # Placeholder
# Sweep through each year and update the value of wealth
for(i in 1:Horizon) {
ThisReturn = rnorm(1, mu, sigma)
Wealth = Wealth * (1 + ThisReturn)
WealthTracker[i] = Wealth
}
WealthTracker
}
head(sim1)
# calculate some summary statistics
summary(sim1$V40)
# Plot a few simulated scenarios
plot(1:Horizon, sim1[1,], type='l')
lines(1:Horizon, sim1[2,], type='l')
lines(1:Horizon, sim1[3,], type='l')
# A cool (more advanced) plot to show variability over time
plot(1:Horizon, colMeans(sim1), type='l', col='red',
xlab="Years into future",
ylab="Value of portfolio",
main="Simulated growth of a stock portfolio over 40 years",
las=1, cex.axis = 0.85,
ylim=c(10000, 2*max(colMeans(sim1))))
for(sim in 1:50) {
lines(1:Horizon, sim1[sim,], type='l', col=rgb(0.5,0.5,0.5,0.25))
}
lines(1:Horizon, colMeans(sim1), lwd=3, col='red')
# legend('topleft',
# 	legend=c("Average trajectory", "All simulations", "Example trajectories"),
# 	lwd=1, col=c("red", "grey", "blue"))
lines(1:Horizon, sim1[1,], col='blue')
lines(1:Horizon, sim1[2,], col='blue')
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean=0.06, sd=0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
horizon = 40
current_wealth = 10000
for(t in 1:horizon) {
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}
current_wealth
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
horizon=40
portfolio_stocks = do(10000)*{  # beginning of outer loop
current_wealth = 10000 # reset at the beginning of each simulated trajectory
for(t in 1:horizon) {  # start of inner loop
return_t = rnorm(1, mean=0.06, sd=0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}  # end of inner loop
# save the final value of wealth
current_wealth
}  # end of outer loop
View(portfolio_stocks)
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
# run a Monte Carlo simulation.
horizon=40
portfolio_stocks = do(10000)*{  # beginning of outer loop
current_wealth = 10000 # reset at the beginning of each simulated trajectory
for(t in 1:horizon) {  # start of inner loop
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}  # end of inner loop
# save the final value of wealth
current_wealth
}  # end of outer loop
# Upon inspecting portfolio_stocks, we find that it has a single column called result
ggplot(portfolio_stocks) +
geom_histogram(aes(x = result), bins=50)
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
# run a Monte Carlo simulation.
horizon=40
portfolio_stocks = do(10000)*{  # beginning of outer loop
current_wealth = 10000 # reset at the beginning of each simulated trajectory
for(t in 1:horizon) {  # start of inner loop
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}  # end of inner loop
# save the final value of wealth
current_wealth
}  # end of outer loop
# Upon inspecting portfolio_stocks, we find that it has a single column called result
ggplot(portfolio_stocks) +
geom_histogram(aes(x = result), bins=50)
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
# run a Monte Carlo simulation.
horizon=40
portfolio_stocks = do(10000)*{  # beginning of outer loop
current_wealth = 10000 # reset at the beginning of each simulated trajectory
for(t in 1:horizon) {  # start of inner loop
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}  # end of inner loop
# save the final value of wealth
current_wealth
}  # end of outer loop
# Upon inspecting portfolio_stocks, we find that it has a single column called result
ggplot(portfolio_stocks) +
geom_histogram(aes(x = result), bins=50)
favstats(~result, data = portfolio_stocks) %>% round(0)
library(tidyverse)
library(mosaic)
aapl_returns = read.csv("data/raw data/aapl_returns.csv", header = TRUE)
ggplot(aapl_returns) +
geom_histogram(aes(x = return, y = ..density..), binwidth = 0.005)
favstats(~return, data = aapl_returns) %>% round(4)
# count the really bad days where aapl lost at least 8% of its value in a single day
aapl_returns %>%
count(return <= -0.08)
aapl_returns %>%
count(return >= 0.10)
# function pnorm can give us how likely is such a four-sigma loss
# (lost at least 8% of its value in a single day) under the normal model
pnorm(-0.08, mean = 0.0013, sd = 0.0202)
# specifying that we want an upper-tail rather than a lower-tail probability
pnorm(0.10, mean = 0.0013, sd = 0.0202, lower.tail = FALSE)
annual_returns_since1928 = read.csv("data/raw data/annual_returns_since1928.csv", header = TRUE)
annual_returns_since1928 = annual_returns_since1928 %>%
# SP500_net, that measures each year’s “whole-market” return, net of inflation
mutate(SP500_net = SP500 - Inflation)
# compute the mean and standard deviation
favstats(~SP500_net, data = annual_returns_since1928) %>%
round(4)
ggplot(annual_returns_since1928) +
geom_histogram(aes(x = SP500_net, y = ..density..), binwidth = 0.05)
# run a Monte Carlo simulation.
horizon=40
portfolio_stocks = do(10000)*{  # beginning of outer loop
current_wealth = 10000 # reset at the beginning of each simulated trajectory
for(t in 1:horizon) {  # start of inner loop
return_t = rnorm(1, mean = 0.06, sd = 0.2)   # generate random return
current_wealth = current_wealth * (1 + return_t)   # update wealth via simple interest formula
}  # end of inner loop
# save the final value of wealth
current_wealth
}  # end of outer loop
# Upon inspecting portfolio_stocks, we find that it has a single column called result
ggplot(portfolio_stocks) +
geom_histogram(aes(x = result), bins=50)
favstats(~result, data = portfolio_stocks) %>% round(0)
portfolio_stocks %>% count(result < 10000)
4*40*24-2*40^2-4*24^2+64*40+32*24-514
32*54-512
-10*34^2+680*34+1216
32*54-514-4*54^2
-10*34^2+680*34-10450
-6*12*9+108*9-4*9^2
-4*2^2-3*3^2+50+24*3-3*2*3
180*45-2*45^2+160*20-4*400
560/72
2800+560*(70/9)-36*(70/9)^2
2800+560*(70/9)-36*(70/9)^2
16900/3
16900/3
2800+560*(70/9)-36*(70/9)^2
16900/3
175/4
knitr::opts_chunk$set(echo = TRUE)
x <- c(0, 2, 3, 5, 6)
y <- c(0, 0.1, 0.2, 1, 1)
plot(x, y, lwd = 3,frame = FALSE, type = "l")
x <- c(0, 0, 2, 3, 5, 6)
y <- c(0, 0, 0.1, 0.2, 1, 1)
plot(x, y, lwd = 3,frame = FALSE, type = "l")
x <- c(0, 2, 2, 3, 5, 6)
y <- c(0, 0, 0.1, 0.2, 1, 1)
plot(x, y, lwd = 3,frame = FALSE, type = "l")
x <- c(0, 2, 2, 3, 3, 5, 6)
y <- c(0, 0, 0.1, 0.1, 0.2, 1, 1)
plot(x, y, lwd = 3,frame = FALSE, type = "l")
x <- c(0, 2, 2, 3, 3, 5, 5, 6)
y <- c(0, 0, 0.1, 0.1, 0.2, 0.2, 1, 1)
plot(x, y, lwd = 3,frame = FALSE, type = "l")
x <- c(0, 2, 2, 3, 3, 5, 5, 8)
y <- c(0, 0, 0.1, 0.1, 0.2, 0.2, 1, 1)
plot(x, y, lwd = 3,frame = FALSE, type = "l")
